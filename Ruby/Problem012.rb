# encoding: UTF-8
# Project Euler
# Solution to Problem 12 in Ruby
# Problem URL: http://projecteuler.net/problem=12
# Author: Pascal Batty
# 
# ======================================================
#
#	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#	Let us list the factors of the first seven triangle numbers:
#
#	 1: 1
#	 3: 1,3
#	 6: 1,2,3,6
#	10: 1,2,5,10
#	15: 1,3,5,15
#	21: 1,3,7,21
#	28: 1,2,4,7,14,28
#	We can see that 28 is the first triangle number to have over five divisors.
#
#	What is the value of the first triangle number to have over five hundred divisors?
#
# ======================================================

class Triangle
	def self.each
		i = 0
		j = 0
		while true
			i += 1
			j += i
			yield j
		end
	end
end

class Integer
	def divisors
		divisors = Array.new
		(1..Math.sqrt(self)).each do |i| 
			if(self%i == 0)
				divisors << i
				divisors << self/i if i != self/i
			end
		end
		return divisors
	end
end

start_time = Time.now

triangle = 0
count = 0
Triangle.each do |x|
	triangle = x
	count = triangle.divisors.count
	break if count > 500
end
puts "#{triangle} => #{count} divisors"

puts "Found in #{Time.now - start_time}s"